# Docker Composition for Zipperlab
# ================================
#
# Set of composed services that make Zipperlab possible.

---

# Services
# --------
#
# The following services collectively enable the Zipperlab application.

services:
    # Static Data
    # ~~~~~~~~~~~
    #
    # This "service" is used to gather the static data from the Zipperlab image so it can be
    # served by the HTTPS proxy frontend.
    static_initializer:
        image: edrndocker/zipperlab:${ZIPPERLAB_VERSION:-latest}
        entrypoint: /bin/sh
        command: ['-c', 'cp -aRL /app/static/* /mnt/volume']
        user: root
        volumes:
            -   static:/mnt/volume

    # HTTPS proxy frontend
    # ~~~~~~~~~~~~~~~~~~~~
    #
    # JPL requires that our front-end web servers reverse-proxy to a TLS-enabled service
    # even if it's localhost.
    tls:
        image: edrndocker/proxycrypt:latest
        environment:
            PROXY_URL: http://app:8000/
            CERT_CN: ${CERT_CN:-edrn-docker.jpl.nasa.gov}
            PROXY_PATH: /zipperlab/
            PROXY_PORT: ${HTTPS_PORT:-4238}
            PROXY_REDIRECT: default
        volumes:
            -   media:/app/media
            -   static:/app/static
        ports:
            -
                target: 443
                published: ${HTTPS_PORT:-4238}
                protocol: tcp
                mode: host
        depends_on:
            -   static_initializer
            -   app
        networks:
            -   mainbus
            -   default

    # Database
    # ~~~~~~~~
    #
    # PostgreSQL on port 5432, not published to host
    db:
        image: postgres:16.2-alpine3.19
        volumes:
            -   "database_volume:/var/lib/postgresql/data"
        networks:
            -   mainbus
        environment:
            POSTGRES_PASSWORD:
        restart:
            on-failure
        stop_grace_period: 13s

    # Cache and Message Broker
    # ~~~~~~~~~~~~~~~~~~~~~~~~
    #
    # Redis acts as both the cache and the message queue
    cache:
        image: redis:7.2.4-alpine3.19
        networks:
            -   mainbus

    # Worker
    # ~~~~~~
    #
    # Celery instance that handles async tasks
    worker:
        image: edrndocker/zipperlab:${ZIPPERLAB_VERSION:-latest}
        entrypoint: ['/app/bin/django-admin', 'worker', '--verbosity', '2']
        volumes:
            -   media:/app/media
            -   labcas:/labcas-data
        networks:
            -   mainbus
        environment:
            # These 3 must be provided in .env or by host
            POSTGRES_PASSWORD:
            LDAP_URI:
            SIGNING_KEY:
            EMAIL_HOST:
            EMAIL_PORT:
            EMAIL_HOST_USER:
            EMAIL_HOST_PASSWORD:
            EMAIL_USE_TLS:
            EMAIL_USE_SSL:
            # The rest are fine or have fine defaults
            ALLOWED_HOSTS: ${ALLOWED_HOSTS:-.jpl.nasa.gov}
            CACHE_URL: redis://cache
            DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@db/zipperlab
            DJANGO_SETTINGS_MODULE: jpl.labcas.zipper.policy.settings.ops
            MQ_URL: redis://cache
        depends_on:
            -   db
            -   cache
        restart: unless-stopped
        stop_grace_period: 13s
        healthcheck:
            disable: true
            test: ['NONE']


    # ZIPPERLAB
    # ~~~~~~
    #
    # The actual application; listens publicly but also available via `tls` service and profile.
    app:
        image: edrndocker/zipperlab:${ZIPPERLAB_VERSION:-latest}
        volumes:
            -   media:/app/media
            -   static:/app/static
            -   labcas:/labcas-data
        networks:
            -   mainbus
        environment:
            # These 3 must be provided in .env or by host
            LDAP_URI:
            POSTGRES_PASSWORD:
            SIGNING_KEY:
            EMAIL_HOST:
            EMAIL_PORT:
            EMAIL_HOST_USER:
            EMAIL_HOST_PASSWORD:
            EMAIL_USE_TLS:
            EMAIL_USE_SSL:
            RECAPTCHA_PUBLIC_KEY:
            RECAPTCHA_PRIVATE_KEY:
            # This must be provided in .env or by host, but is only used during the
            # `exec app /app/bin/django-admin zipperlab_bloom` step:
            DEFAULT_LDAP_SERVER_PASSWORD:
            # The rest are fine or have fine defaults
            ALLOWED_HOSTS: ${ALLOWED_HOSTS:-.jpl.nasa.gov}
            CACHE_URL: redis://cache
            DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@db/zipperlab
            DJANGO_SETTINGS_MODULE: jpl.labcas.zipper.policy.settings.ops
            FORCE_SCRIPT_NAME: /zipperlab
            MEDIA_ROOT: /app/media
            MEDIA_URL: /zipperlab/media/
            MQ_URL: redis://cache
            STATIC_ROOT: /app/static
            STATIC_URL: /zipperlab/static/
        depends_on:
            -   static_initializer
            -   db
            -   cache
        restart: unless-stopped
        stop_grace_period: 13s
        healthcheck:
            disable: true
            test: ['NONE']


# Networks
# --------
#
# Thankfully, this is also pretty simple.

networks:
    mainbus:
        driver: bridge
        external: false
        labels:
            org.label-schema.name: Mainbus Network
            org.label-schema.description: >
                Internal bridge network so the services that comprise the ZIPPERLAB may communicate.


# Volumes
# -------
#
# For persistent data across composition existence.

volumes:
    # Media are things like images, PDFs, etc., that users upload while editing the site
    # and can be served by the site.
    media:
        driver: local
        driver_opts:
            type: none
            device: ${DATA_DIR:-/usr/local/labcas/zipperlab/ops/dockerdata}/media
            o: bind
        labels:
            org.label-schema.name: Wagtail user media volume

    # Static resources are things that support the display of the site, such as CSS files
    # and JavaScript. They don't need to be persisted anywhere special.
    static:
        driver: local
        labels:
            org.label-schema.name: Wagtail and Django static resources volume


    # The database volume cannot be called "database"; it causes a bizarre error. But
    # calling it "database_volume" is fine. And we persist it specially for backups and
    # exports.
    database_volume:
        driver: local
        driver_opts:
            type: none
            device: ${DATA_DIR:-/usr/local/labcas/zipperlab/ops/dockerdata}/postgresql
            o: bind
        labels:
            org.label-schema.name: PostgreSQL database volume

    # LabCAS data
    labcas:
        driver: local
        driver_opts:
            type: one
            device: /labcas-data
            o: bind
        labels:
            org.label-schema.name: LabCAS Data

...

# -*- mode: YAML; tab-width: 4 -*-
